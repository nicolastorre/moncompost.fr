- name: Create deployment directory
  file:
    path: "{{ app_dest_dir }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: "0755"

- name: Ensure .ssh directory exists
  file:
    path: "/home/{{ app_user }}/.ssh"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: "0700"

- name: Copy deploy private key
  copy:
    content: "{{ deploy_key_private_base64 | b64decode }}"
    dest: "/home/{{ app_user }}/.ssh/id_deploy_key"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: "0600"

- name: Setup SSH config for GitHub
  copy:
    dest: "/home/{{ app_user }}/.ssh/config"
    content: |
      Host github.com
        HostName github.com
        IdentityFile /home/{{ app_user }}/.ssh/id_deploy_key
        IdentitiesOnly yes
        StrictHostKeyChecking no
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: "0644"

- name: Delete all files and folders inside /var/www, including hidden ones
  shell: rm -rf /var/www/*

- name: Clone monorepo from GitHub
  git:
    repo: "{{ git_url }}"
    dest: "{{ app_dest_dir }}"
    version: main
    accept_hostkey: yes
    update: yes
  become_user: "{{ app_user }}"

- name: Create .env file from template
  template:
    src: env.j2
    dest: "{{ app_dest_dir }}/.env"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: "0644"
  vars:
    vite_api_base_url: "{{ vite_api_base_url }}"
    port: "{{ port }}"
    mongo_uri: "{{ mongo_uri }}"

- name: Build Docker images with docker-compose.prod.yml
  command: docker compose -f docker-compose.prod.yml build
  args:
    chdir: "{{ app_dest_dir }}"
  become_user: "{{ app_user }}"

- name: Start Docker containers with docker-compose.prod.yml
  command: docker compose -f docker-compose.prod.yml up -d
  args:
    chdir: "{{ app_dest_dir }}"
  become_user: "{{ app_user }}"

- name: Build frontend using Docker and Yarn
  command: >
    docker run --rm
    -v {{ app_dest_dir }}:/app
    -w /app
    node:23
    /bin/bash -c "yarn install --frozen-lockfile && yarn workspace frontend build"
  args:
    chdir: "{{ app_dest_dir }}"
  become_user: "{{ app_user }}"

- name: Set ownership of frontend dist files to puget
  file:
    path: /home/puget/app/packages/frontend/dist
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    recurse: yes
    state: directory
  become: yes
  become_user: "{{ app_user }}"
